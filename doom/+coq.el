;; This is mostly copied from the coq module definition
;; Better not remove any bindings in order to keep all in one place
(map! :after coq-mode
      :map (coq-mode-map coq-goals-mode-map coq-response-mode-map)
      :localleader
      "n" #'proof-assert-next-command-interactive
      "u" #'proof-undo-last-successful-command
      "RET" #'proof-goto-point
      "." #'company-coq-jump-to-definition
      "x" #'proof-shell-exit
      (:prefix ("l" . "layout")
        "c" #'pg-response-clear-displays
        "l" #'proof-layout-windows
        "p" #'proof-prf)
      (:prefix ("p" . "proof")
        "i" #'proof-interrupt-process
        "p" #'proof-process-buffer
        "q" #'proof-shell-exit
        "r" #'proof-retract-buffer)
      (:prefix ("a" . "about/print/check")
        "p" #'coq-Print
        "P" #'coq-Print-with-all
        "b" #'coq-About
        "B" #'coq-About-with-all
        "c" #'coq-Check
        "C" #'coq-Check-show-all
        "c" #'coq-show
        "a" #'coq-Search
        "f" #'proof-find-theorems
        (:prefix ("i" . "implicits")
          "b" #'coq-About-with-implicits
          "c" #'coq-Check-show-implicits
          "i" #'coq-Print-with-implicits))
      (:prefix ("g" . "goto")
        "e" #'proof-goto-command-end
        "l" #'proof-goto-end-of-locked
        "s" #'proof-goto-command-start)
      (:prefix ("i" . "insert")
        "c" #'coq-insert-command
        "e" #'coq-end-Section
        "i" #'coq-insert-intros
        "r" #'coq-insert-requires
        "s" #'coq-insert-section-or-module
        "t" #'coq-insert-tactic
        "T" #'coq-insert-tactical))

;; set after package doesn't work :(
;; Configure when to change layout modes of proof general (1 column vs. 2 columns)
;; (setq split-width-threshold 190)

;; Change the major mode symbol for Coq (using delight)
(use-package! delight
  :config
  (delight 'coq-mode "üêì" :major)
  (delight 'coq-goals-mode "üêì Goals" :major)
  (delight 'coq-response-mode "üêì Response" :major)
)
;;)
;; Disable Company Coq Features (Including prettify-symbols)
(after! company-coq
  (add-to-list  'company-coq-disabled-features 'prettify-symbols))

;; ****************************************************
;; ********************* IRIS SYM *********************
;; ****************************************************

(defun iris-input-config ()
  "Set up math input for Iris.
    Based on https://gitlab.mpi-sws.org/iris/iris/-/blob/master/docs/editor.md, and
    https://github.com/tchajed/dotfiles/blob/master/emacs/doom/%2Bcoq.el"

  ;; Input method for the minibuffer
  (defun my-inherit-input-method ()
    "Inherit input method from `minibuffer-selected-window'."
    (let* ((win (minibuffer-selected-window))
           (buf (and win (window-buffer win))))
      (when buf
        (activate-input-method (buffer-local-value 'current-input-method buf)))))
  (add-hook 'minibuffer-setup-hook #'my-inherit-input-method)
  ;; Define the actual input method
  (quail-define-package "math" "UTF-8" "Œ©" t)

  ;; ;; https://emacs.stackexchange.com/questions/76725/how-to-implement-a-function-in-quail-define-rules-for-set-input-method
  ;; (defun quail-action-f (key idx)    ; key=keyword, idx=length
  ;;   (quail-delete-region)                 ; these lines apparently needed
  ;;   (setq quail-current-str nil           ; to remove key.
  ;;         quail-converting nil            ; (not sure why all 4 is needed)
  ;;         quail-conversion-str "")        ;


  ;;   (insert "‚ü®‚ü©")
  ;;   (forward-char -1)

  ;;   (throw 'quail-tag nil)                ; this is need for finishing up?
  ;;   )

  (quail-define-rules ; add whatever extra rules you want to define here...
    ("\\fun"         ?Œª)
    ("\\mult"        ?‚ãÖ)
    ("\\ent"         ?‚ä¢)
    ("\\valid"       ?‚úì)
    ("\\diamond"     ?‚óá)
    ("\\box"         ?‚ñ°)
    ("\\bbox"        ?‚ñ†)
    ("\\later"       ?‚ñ∑)
    ("\\pred"        ?œÜ)
    ("\\and"         ?‚àß)
    ("\\or"          ?‚à®)
    ("\\comp"        ?‚àò)
    ("\\ccomp"       ?‚óé)
    ("\\all"         ?‚àÄ)
    ("\\forall"      ?‚àÄ)
    ("\\ex"          ?‚àÉ)
    ("\\exists"      ?‚àÉ)
    ("\\to"          ?‚Üí)
    ("\\sep"         ?‚àó)
    ("\\lc"          ?‚åú)
    ("\\rc"          ?‚åù)
    ("\\Lc"          ?‚é°)
    ("\\Rc"          ?‚é§)
    ("\\lam"         ?Œª)
    ("\\empty"       ?‚àÖ)
    ("\\Lam"         ?Œõ)
    ("\\Sig"         ?Œ£)
    ("\\-"           ?‚àñ)
    ("\\aa"          ?‚óè)
    ("\\af"          ?‚óØ)
    ("\\auth"        ?‚óè)
    ("\\frag"        ?‚óØ)
    ("\\iff"         ?‚Üî)
    ("\\gname"       ?Œ≥)
    ("\\incl"        ?‚âº)
    ("\\latert"      ?‚ñ∂)
    ("\\update"      ?‚áù)
    ("\\lt"          ?‚§≥)

    ;; accents (for iL√∂b)
    ("\\\"o" ?√∂)

    ;; subscripts and superscripts
    ("^^+" ?‚Å∫) ("__+" ?‚Çä) ("^^-" ?‚Åª)
    ("__0" ?‚ÇÄ) ("__1" ?‚ÇÅ) ("__2" ?‚ÇÇ) ("__3" ?‚ÇÉ) ("__4" ?‚ÇÑ)
    ("__5" ?‚ÇÖ) ("__6" ?‚ÇÜ) ("__7" ?‚Çá) ("__8" ?‚Çà) ("__9" ?‚Çâ)

    ("__a" ?‚Çê) ("__e" ?‚Çë) ("__h" ?‚Çï) ("__i" ?·µ¢) ("__k" ?‚Çñ)
    ("__l" ?‚Çó) ("__m" ?‚Çò) ("__n" ?‚Çô) ("__o" ?‚Çí) ("__p" ?‚Çö)
    ("__r" ?·µ£) ("__s" ?‚Çõ) ("__t" ?‚Çú) ("__u" ?·µ§) ("__v" ?·µ•) ("__x" ?‚Çì)

    ;; Greek alphabet
    ("\\Alpha"    ?Œë) ("\\alpha"    ?Œ±)
    ("\\Beta"     ?Œí) ("\\beta"     ?Œ≤)
    ("\\Gamma"    ?Œì) ("\\gamma"    ?Œ≥)
    ("\\Delta"    ?Œî) ("\\delta"    ?Œ¥)
    ("\\Epsilon"  ?Œï) ("\\epsilon"  ?Œµ)
    ("\\Zeta"     ?Œñ) ("\\zeta"     ?Œ∂)
    ("\\Eta"      ?Œó) ("\\eta"      ?Œ∑)
    ("\\Theta"    ?Œò) ("\\theta"    ?Œ∏)
    ("\\Iota"     ?Œô) ("\\iota"     ?Œπ)
    ("\\Kappa"    ?Œö) ("\\kappa"    ?Œ∫)
    ("\\Lamda"    ?Œõ) ("\\lamda"    ?Œª)
    ("\\Lambda"   ?Œõ) ("\\lambda"   ?Œª)
    ("\\Mu"       ?Œú) ("\\mu"       ?Œº)
    ("\\Nu"       ?Œù) ("\\nu"       ?ŒΩ)
    ("\\Xi"       ?Œû) ("\\xi"       ?Œæ)
    ("\\Omicron"  ?Œü) ("\\omicron"  ?Œø)
    ("\\Pi"       ?Œ†) ("\\pi"       ?œÄ)
    ("\\Rho"      ?Œ°) ("\\rho"      ?œÅ)
    ("\\Sigma"    ?Œ£) ("\\sigma"    ?œÉ)
    ("\\Tau"      ?Œ§) ("\\tau"      ?œÑ)
    ("\\Upsilon"  ?Œ•) ("\\upsilon"  ?œÖ)
    ("\\Phi"      ?Œ¶) ("\\phi"      ?œÜ)
    ("\\Chi"      ?Œß) ("\\chi"      ?œá)
    ("\\Psi"      ?Œ®) ("\\psi"      ?œà)
    ("\\Omega"    ?Œ©) ("\\omega"    ?œâ)

   )
  ;; use the newly-created math input method
  (set-input-method "math")
)

(add-hook! coq-mode
  (iris-input-config)
  ;; Map symbols to other for indentation
  (setq coq-smie-user-tokens
   '(("," . ":=")
     ("‚àó" . "->")
     ("-‚àó" . "->")
     ("‚àó-‚àó" . "->")
     ("==‚àó" . "->")
     ("=‚àó" . "->") 			;; Hack to match ={E1,E2}=‚àó
     ("|==>" . ":=")
     ("‚ä¢" . "->")
     ("‚ä£‚ä¢" . "->")
     ("‚Üî" . "->")
     ("‚Üê" . "<-")
     ("‚Üí" . "->")
     ("=" . "->")
     ("==" . "->")
     ("/\\" . "->")
     ("‚ãÖ" . "->")
     (":>" . ":=")
     ("by" . "now")
     ("forall" . "now")              ;; NB: this breaks current ‚àÄ indentation.
   ))

  ;; Avoid additional paren when adding comments
  ;;   https://github.com/tchajed/dotfiles/blob/master/emacs/doom/%2Bcoq.el
  (when (modulep! :config default +smartparens)
    (after! smartparens
      (sp-with-modes '(coq-mode)
        (sp-local-pair "(*" "*)")
        (sp-local-pair "(*" "*"
                     ;:actions '(insert)
                     :post-handlers '(("| " "SPC") ("|\n[i]*[d-2]" "RET")))
  )))


  ;; Overwriteing Proof Generals prettification list
  (setq-local prettify-symbols-alist
            '(("Qed." . ?üê£) ("Defined." . ?üê§) ("Admitted." . ?üçó)))
  (prettify-symbols-mode)

  ;; Based on Michael Sammler's comment.
  ;; https://mattermost.mpi-sws.org/iris/pl/8w7yujxjwfn9zg7usgj9ctwyhh
  ;; Relies on script opam-coqtop in PATH which calls coq through opam
  (setq coq-prog-name "opam-coqtop")
  ;; Disable electric indents
  (electric-indent-mode -1)
)

;; Add column indicator
(add-hook! coq-mode #'display-fill-column-indicator-mode)
